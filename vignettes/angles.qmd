---
title: "Angles"
format: 
  html:
    toc: true
vignette: >
  %\VignetteIndexEntry{Angles}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
library(ggpathdiagramr)
library(ggplot2)
```

```{r setup}
library(ggpathdiagramr)
```

Angles have different kinds of units associated with them: degrees, radians, gradians, and turns. The `angle` class can take turns (i.e., 1 turn = one full rotation a circle), degrees (1 turn = 360 degrees), radians (1 turn = $2\pi$ = $\tau$), or gradians (1 turn = 400 gradians, gons, or grads).

I like &pi; just fine, but I agree with Michael Hartl's [Tau Manifesto](https://tauday.com/tau-manifesto) that we would have been better off if we had recognized that the number of radians to complete a full circle is more fundamental than the number of radians to complete a half circle. The symbol for this value is &tau; = 2&pi; &asymp; 6.283185

Turns | Radians | Degrees | Gradians|
:----:|:-------:|:-------:|:-------:|
$\frac{1}{12}$ | $\frac{\tau}{12}~\text{or}~\frac{\pi}{6}$ | $30^\circ$  | $33.\bar{3}$ |
$\frac{1}{8}$ | $\frac{\tau}{8}~\text{or}~\frac{\pi}{4}$ | $45^\circ$  | $50$ |
$\frac{1}{6}$ | $\frac{\tau}{6}~\text{or}~\frac{\pi}{3}$ | $60^\circ$ | $66.\bar{6}$ |
$\frac{1}{4}$ | $\frac{\tau}{4}~\text{or}~\frac{\pi}{2}$ | $90^\circ$ | $100$ |
$\frac{1}{3}$ | $\frac{\tau}{3}~\text{or}~\frac{2\pi}{3}$ | $120^\circ$ | $133.\bar{3}$ |
$\frac{1}{2}$ | $\frac{\tau}{2}~\text{or}~\pi$ | $180^\circ$ | $200$ |
$\frac{2}{3}$ | $\frac{2\tau}{3}~\text{or}~\frac{4\pi}{3}$ | $240^\circ$ | $266.\bar{6}$ |
$1$ | $\tau~\text{or}~2\pi$ | $360^\circ$ | $400$ |



One can create equivalent angles with any of the four metrics.

```{r}
right_angle <- angle(degree = 90)
right_angle == angle(turn = 1 / 4) 
right_angle == angle(radian = pi / 2)
right_angle == angle(gradian = 100)
```

For the sake of convenience, one can create angles in each of these metrics directly:

```{r}
right_angle == degree(90)
right_angle == turn(1 / 4)
right_angle == radian(pi / 2)
right_angle == gradian(100)
```




# Arithmetic Operations

Angles can be added, subtracted, multiplied, and divided. The result is never negative and always less than 1 turn (360 degrees or $\tau$ radians).

$$30\unicode{xb0} + 60\unicode{xb0} = 90\unicode{xb0}$$

```{r}
degree(30) + degree(60) == degree(90) 
```


```{r}
style_A <- style(color = "firebrick")
style_B <- style(color = "royalblue")
v <- degree(c(0,30,90))
arc_A <- arc(radius = .15, 
             start = v[[1]], 
             end = v[[2]], 
             style = style_A)
arc_B <- arc(radius = .15, 
             start = v[[2]], 
             end = v[[3]], 
             style = style_B)

arc_A_mid <- midpoint(arc_A)
arc_B_mid <- midpoint(arc_B)

ggplot() +
  theme_void() +
  coord_equal()  +
  arc_A +
  arc_B +
  label(
    arc_A_mid,
    style = style_A + radial_just(arc_A_mid@angle + degree(180 + 10)),
    label = "30°",
  ) +
  label(
    arc_B_mid,
    style = style_B + radial_just(arc_B_mid@angle + degree(180 + 10)),
    label = "60°",
  ) +
  ggarrow::geom_arrow_segment(data = tibble::tibble(
    xend = cos(v), 
    yend = sin(v), 
    x = 0, 
    y = 0),
                              aes(
                                xend = xend,
                                yend = yend,
                                x = x,
                                y = y
                              ), 
                              arrow_head = arrowheadr::arrow_head_deltoid())


```


$$\begin{align}330\unicode{xb0} + 60\unicode{xb0} &= 390\unicode{xb0}\\&=30\unicode{xb0}\end{align}$$

```{r}
degree(330) + degree(60) == degree(30)
```

$$\begin{align}10\unicode{xb0} - 20\unicode{xb0} &= -10\unicode{xb0}\\&=350\unicode{xb0}\end{align}$$

```{r}
degree(10) - degree(20) == degree(350)
```

$$2\cdot20\unicode{xb0}=40\unicode{xb0}$$


```{r}
2 * degree(20) == degree(40)
```

$$\begin{align}2\cdot180 &= 360\unicode{xb0}\\&=0\unicode{xb0}\end{align}$$

```{r}
2 * degree(180) == degree(0)
```

# Trigonometry

Angles can take the three standard trigonometric functions

```{r}
theta <- degree(180)
cos(theta)
sin(theta)
tan(theta)
```

Benefits of using trigonometric functions with angles instead of numeric radians include:

* Angle metric conversions are handled automatically.
* Under the hood, the `cospi`, `sinpi`, and `tanpi` functions are used to get the rounding right on key locations (e.g., 90 degrees, 180 degrees)

For example, `tan(pi)` is slightly off from its true value of 0.

```{r}
tan(pi)
```

By contrast, `tan(radian(pi))` rounds to 0 exactly.

```{r}
tan(radian(pi))
```

